{"mappings":"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","sources":["public/src/scene/lilies.js"],"sourcesContent":["class LinearLilies {\r\n  constructor(cam,\r\n              sprite,\r\n              lilyScale = 1,\r\n              lilySpacingX = 10,\r\n              lilyMarginX = 20,\r\n              lilyY = screenSizeY * .9,\r\n              negativeLilies = true) { \r\n    this.cam = cam;\r\n    this.sprite = sprite;\r\n    this.lilySpacingX = lilySpacingX;\r\n    this.lilyY = lilyY;\r\n    this.lilyScale = lilyScale;\r\n\r\n    this.negativeLilies = negativeLilies;\r\n    if (!this.negativeLilies) this.cam.targetOffsetX = screenSizeX / 3;\r\n    this.lilyBounds = [Number.MIN_VALUE, Number.MAX_VALUE];\r\n\r\n    this.kerplunked = [];\r\n    this.kerplunkSpeed = 5;\r\n    this.buoyancy = .5;\r\n  }\r\n\r\n  get lilyDimX() {\r\n    return this.lilyScale * this.sprite.width;\r\n  }\r\n\r\n  get lilyDimY() {\r\n    return this.lilyScale * this.sprite.height;\r\n  }\r\n\r\n  get camLilySize() {\r\n    return [this.cam.scale * this.lilyDimX, this.cam.scale * this.lilyDimY];\r\n  }\r\n\r\n  get trueLilySpacingX() {\r\n    return this.lilyDimX + this.lilySpacingX;\r\n  } \r\n\r\n  calcStartLily() {\r\n    this.startLily = 0;//Math.floor(this.numLilies / 2);\r\n    this.startLilyX = 0;\r\n    this.leftLily = 0;\r\n    this.rightLily = this.numLilies - 1;\r\n  }\r\n\r\n  calcLeftLily() {\r\n    this.leftLily = Math.ceil((this.cam.x - this.cam.w / 2) / this.trueLilySpacingX) - this.startLily;\r\n    this.numLilies = Math.ceil(this.cam.w / this.trueLilySpacingX) + 1;\r\n  }\r\n\r\n  getLilyPos(i) {\r\n    let lilyX = this.startLilyX + this.trueLilySpacingX * i;\r\n\r\n    if (!this.negativeLilies) {\r\n      if (i < this.startLily) lilyX = this.startLilyX;\r\n    }\r\n    return [lilyX, this.lilyY]\r\n  }\r\n\r\n  invertLilyX(x) {\r\n    return Math.round((x - this.leftLily) / this.trueLilySpacingX);\r\n  }\r\n\r\n  kerplunkAnim(n) {\r\n    this.kerplunked.push([n, this.kerplunkSpeed]);\r\n  }\r\n\r\n  frogWithinBounds() {\r\n    if ((frog.lily == this.lilyBounds[0]) && frog.pointingLeft) {\r\n      return false;\r\n    }\r\n    else if ((frog.lily == this.lilyBounds[1]) && !frog.pointingLeft) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  envCondition(frog, request) {\r\n    if (request) {\r\n      let dir = (frog.pointingLeft ? -1 : 1);\r\n\r\n      if (!this.frogWithinBounds()) return false;\r\n\r\n      if (!this.negativeLilies) {\r\n        let intendedLily = frog.number + dir * frog.type;\r\n\r\n        // possible: special behavior when < 0\r\n        if ((intendedLily < 0) && (frog.pointingLeft || frog.type != 0)) {\r\n          return false;\r\n        }\r\n      } \r\n\r\n      frog.direction = dir;\r\n      frog.lily += frog.travelDist;\r\n\r\n      return true;\r\n    }\r\n  }\r\n\r\n  envJump(frog) {\r\n    frog.linearJump();\r\n  }\r\n\r\n  envDependentFrame(player) {\r\n    player.character.pointingLeft = player.pointingLeft;\r\n\r\n    if (player.character.jumpFrames == player.character.maxJumpFrames) {\r\n      this.number += this.travelDist;\r\n    }\r\n  }\r\n\r\n  envJumpEnd(frog) {\r\n    frog.number += frog.travelDist;\r\n  }\r\n\r\n  draw() {\r\n    this.calcLeftLily();\r\n\r\n    for (let i = this.leftLily - 1; i <= this.leftLily + this.numLilies; i++) {\r\n      if (envType == 'LinearLilies2D') {\r\n        for (let j = this.topLily; j <= this.topLily + this.numLiliesY; j++) {\r\n          const lilyPos = cam.toCamCoords(...this.getLilyPos(i, j));\r\n          image(this.sprite, ...lilyPos, ...this.camLilySize);\r\n        }\r\n      }\r\n      else {\r\n        let kerplunkY = 0;\r\n\r\n        for (let [k, kLily] of Object.entries(this.kerplunked)) {\r\n          if (i == kLily[0]) {\r\n            kerplunkY = kLily[1];\r\n            kLily[1] = Math.max(0, kerplunkY - this.buoyancy);\r\n\r\n            if (kLily[1] == 0) this.kerplunked.splice(k, 1);\r\n          }\r\n        }\r\n\r\n        let lilyPos = this.getLilyPos(i);\r\n        lilyPos[1] += kerplunkY;\r\n        lilyPos = cam.toCamCoords(...lilyPos, true, false);\r\n\r\n        image(this.sprite, ...lilyPos, ...this.camLilySize);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass CyclicLilies {\r\n  constructor(cam,\r\n              sprite,\r\n              numLilies = 11) {\r\n    this.cam = cam;\r\n    this.sprite = sprite;\r\n\r\n    this.numLilies = numLilies;\r\n    this.radius = screenSizeX * .2;\r\n    this.radiusX = this.radius;\r\n    this.radiusY = this.radius;\r\n    this.lilyCenterX = screenSizeX / 2;\r\n    this.lilyCenterY = screenSizeY / 2;\r\n    this.lilyScale = 1;\r\n\r\n    this.kerplunked = [];\r\n    this.kerplunkSpeed = 10;\r\n    this.buoyancy = .5;\r\n  }\r\n\r\n  get lilyDimX() {\r\n    return this.sprite.width * this.lilyScale;\r\n  }\r\n\r\n  get lilyDimY() {\r\n    return this.sprite.height * this.lilyScale;\r\n  }\r\n\r\n  get angle() {\r\n    return 2 * Math.PI / this.numLilies;\r\n  }\r\n\r\n  get camLilySize() {\r\n    return [this.lilyDimX, this.lilyDimY];\r\n  }\r\n\r\n  calcLeftLily() {\r\n    this.leftLily = 0;\r\n    this.leftLilyPos = this.getLilyPos(0);\r\n    [this.leftLilyX, this.leftLilyY] = this.leftLilyPos;\r\n  }\r\n\r\n  kerplunkAnim(n) {\r\n    this.kerplunked.push([n, this.kerplunkSpeed]);\r\n  }\r\n\r\n  getCircleCoords(angle) {\r\n    return [this.radiusX * Math.cos(angle), -this.radiusY * Math.sin(angle)];\r\n  }\r\n\r\n  getLilyPos(i) {\r\n    let angle = this.angle * i;\r\n    let [lilyX, lilyY] = this.getCircleCoords(angle);\r\n\r\n    return [this.lilyCenterX + lilyX, this.lilyCenterY + lilyY];\r\n  }\r\n\r\n  getDirection(frog) {\r\n    let theta = this.angle * (frog.lily + frog.type * .5);\r\n    return Math.sign(-Math.sin(theta));\r\n  }\r\n\r\n  frogWithinBounds() { return true; }\r\n\r\n  envCondition(frog, request) {\r\n    if (request == 'jump') {\r\n      if (!frog.isJumping) {\r\n        let dir = 1;//frog.mouseLeft ? -1 : 1;\r\n        let theta = this.angle * (frog.lily + dir * frog.type * .5);\r\n        frog.lastJumpedDir = dir;\r\n        frog.direction = dir * Math.sign(-Math.sin(theta));\r\n        frog.lily += dir * frog.type;\r\n\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  envJump(frog) {\r\n    if (frog.type > this.numLilies / 2) {\r\n      let angle = lerp(this.angle * (frog.lily - frog.lastJumpedDir * frog.type), \r\n                       this.angle * frog.lily, \r\n                       frog.jumpProgress);\r\n      let [frogX, frogY] = this.getCircleCoords(angle);\r\n      let decayRate = Math.sqrt(frog.type);\r\n\r\n      frog.baseJumpHeight = frog.baseJumpStore / decayRate;\r\n      frog.posX = this.lilyCenterX + frogX + frog.offX;\r\n      frog.posY = this.lilyCenterY + frogY + frog.jumpY + frog.offY;\r\n    } else {\r\n      frog.baseJumpHeight = frog.baseJumpStore;\r\n      frog.linearJump();\r\n    }\r\n  }\r\n\r\n  envDependentFrame(player) {\r\n    player.character.pointingLeft = player.character.direction == -1;\r\n    player.character.mouseLeft = player.pointingLeft;\r\n\r\n    if (player.character.stoppedJumping) {\r\n      //player.character.number += 2 * player.character.lastJumpedDir * player.character.type;\r\n      player.character.stoppedJumping = false;\r\n    }\r\n  }\r\n\r\n  envJumpEnd(frog) {\r\n    frog.number += frog.type;\r\n  }\r\n\r\n  draw() {\r\n    this.calcLeftLily();\r\n\r\n    for (let i = this.leftLily; i < this.leftLily + this.numLilies; i++) {\r\n      if (envType == 'LinearLilies2D') {\r\n        for (let j = this.topLily; j <= this.topLily + this.numLiliesY; j++) {\r\n          const lilyPos = cam.toCamCoords(...this.getLilyPos(i, j));\r\n\r\n          image(this.sprite, ...lilyPos, ...this.camLilySize);\r\n        }\r\n      }\r\n      else {\r\n        let kerplunkY = 0;\r\n\r\n        for (let [k, kLily] of Object.entries(this.kerplunked)) {\r\n          if (i == kLily[0]) {\r\n            kerplunkY = kLily[1];\r\n            kLily[1] = Math.max(0, kerplunkY - this.buoyancy);\r\n\r\n            if (kLily[1] == 0) this.kerplunked.splice(k, 1);\r\n          }\r\n        }\r\n\r\n        let lilyPos = this.getLilyPos(i);\r\n        lilyPos[1] += kerplunkY;\r\n        lilyPos = cam.toCamCoords(...lilyPos, true, false);\r\n\r\n        image(this.sprite, ...lilyPos, ...this.camLilySize);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nclass LinearLilies2D extends LinearLilies {\r\n  constructor(cam,\r\n              sprite,\r\n              lilyScale = .2,\r\n              lilySpacingX = 1,\r\n              lilyMarginX = 20,\r\n              lilyY = screenSizeY * .82,\r\n              negativeLilies = true) { \r\n    super(cam, sprite, lilyScale, lilySpacingX, lilyMarginX, lilyY, negativeLilies);\r\n    this.jVal = 1;\r\n    this.negativeLilies = true;\r\n  }\r\n\r\n  get lilyDimX() {\r\n    return this.lilyScale * this.sprite.width;\r\n  }\r\n\r\n  get lilyDimY() {\r\n    return this.lilyScale * this.sprite.height;\r\n  }\r\n\r\n  get camLilySize() {\r\n    return [this.lilyDimX, this.lilyDimY];\r\n  }\r\n\r\n  get trueLilySpacingX() {\r\n    return this.sprite.width * this.lilyScale + this.lilySpacingX;\r\n  } \r\n\r\n  calcStartLily() {\r\n    this.startLily = Math.floor(this.numLilies / 2);\r\n    this.startLilyX = screenSizeX / 2;\r\n    this.startLilyY = screenSizeY / 2;\r\n    this.leftLily = 1;\r\n    this.rightLily = this.numLilies - 1;\r\n    this.jVal = 5;\r\n  }\r\n\r\n  calcLeftLily() {\r\n    this.leftLily = Math.ceil((this.cam.x - this.cam.w / 2) / this.trueLilySpacingX) - this.startLily;\r\n    this.numLilies = 5* Math.ceil(this.cam.w / this.trueLilySpacingX) + 1;\r\n\r\n    this.topLily = Math.ceil((this.cam.y + this.cam.h / 2) / this.trueLilySpacingX) - this.startLily;\r\n    this.numLiliesY = 10 * Math.ceil(this.cam.h / this.trueLilySpacingX) + 1;\r\n  }\r\n\r\n  getLilyPos(i, j = -1) {\r\n    if (j == -1) j = this.jVal;\r\n    let lilyX = this.startLilyX + this.trueLilySpacingX * i;\r\n    let lilyY = this.trueLilySpacingX * j;\r\n\r\n    // if (!this.negativeLilies) {\r\n    //   if (i < this.startLily) lilyX = this.startLilyX;\r\n    // }\r\n    return this.cam.toWorldCoords(lilyX, lilyY);\r\n  }\r\n\r\n  invertLilyX(x) {\r\n    return Math.floor((x - this.leftLilyX) / this.trueLilySpacingX + 1.5);\r\n  }\r\n  frogWithinBounds() { return true; }\r\n\r\n  envCondition(frog, request) {\r\n    if (request) {\r\n      let dir = (frog.pointingLeft ? -1 : 1);\r\n\r\n      if (!this.negativeLilies) {\r\n        let intendedLily = frog.number + dir * frog.type;\r\n\r\n        // possible: special behavior when < 0\r\n        if ((intendedLily < 0) && (frog.pointingLeft || frog.type != 0)) {\r\n          return false;\r\n        }\r\n      } \r\n\r\n      frog.direction = dir;\r\n      frog.lily += frog.travelDist;\r\n\r\n      return true;\r\n    }\r\n  }\r\n\r\n  envJump(frog) {\r\n    frog.linearJump();\r\n  }\r\n\r\n  envDependentFrame(player) {\r\n    player.character.pointingLeft = player.pointingLeft;\r\n    player.character.mouseLeft = player.character.pointingLeft;\r\n\r\n    if (player.character.jumpFrames == player.character.maxJumpFrames) {\r\n      this.number += this.travelDist;\r\n    }\r\n  }\r\n}"],"names":["LinearLilies","constructor","cam","sprite","lilyScale","lilySpacingX","lilyMarginX","lilyY","screenSizeY","negativeLilies","this","targetOffsetX","screenSizeX","lilyBounds","Number","MIN_VALUE","MAX_VALUE","kerplunked","kerplunkSpeed","buoyancy","lilyDimX","width","lilyDimY","height","camLilySize","scale","trueLilySpacingX","calcStartLily","startLily","startLilyX","leftLily","rightLily","numLilies","calcLeftLily","Math","ceil","x","w","getLilyPos","i","lilyX","invertLilyX","round","kerplunkAnim","n","push","frogWithinBounds","frog","lily","pointingLeft","envCondition","request","dir","number","type","direction","travelDist","envJump","linearJump","envDependentFrame","player","character","jumpFrames","maxJumpFrames","envJumpEnd","draw","envType","j","topLily","numLiliesY","lilyPos","toCamCoords","image","kerplunkY","k","kLily","Object","entries","max","splice","CyclicLilies","radius","radiusX","radiusY","lilyCenterX","lilyCenterY","angle","PI","leftLilyPos","leftLilyX","leftLilyY","getCircleCoords","cos","sin","getDirection","theta","sign","isJumping","lastJumpedDir","lerp","jumpProgress","frogX","frogY","decayRate","sqrt","baseJumpHeight","baseJumpStore","posX","offX","posY","jumpY","offY","mouseLeft","stoppedJumping","LinearLilies2D","super","jVal","floor","startLilyY","y","h","toWorldCoords"],"version":3,"file":"index.9bde0ce5.js.map"}