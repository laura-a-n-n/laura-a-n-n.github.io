{"mappings":"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","sources":["public/src/scene/lilies.js"],"sourcesContent":["class LinearLilies {\r\n  constructor(cam,\r\n              sprite,\r\n              lilyScale = 1,\r\n              lilySpacingX = 10,\r\n              lilyMarginX = 20,\r\n              lilyY = screenSizeY * .9,\r\n              negativeLilies = true) { \r\n    this.cam = cam;\r\n    this.sprite = sprite;\r\n    this.lilySpacingX = lilySpacingX;\r\n    this.lilyY = lilyY;\r\n    this.lilyScale = lilyScale;\r\n\r\n    this.negativeLilies = negativeLilies;\r\n    if (!this.negativeLilies) this.cam.targetOffsetX = screenSizeX / 3;\r\n\r\n    this.kerplunked = [];\r\n    this.kerplunkSpeed = 5;\r\n    this.buoyancy = .5;\r\n  }\r\n\r\n  get lilyDimX() {\r\n    return this.lilyScale * this.sprite.width;\r\n  }\r\n\r\n  get lilyDimY() {\r\n    return this.lilyScale * this.sprite.height;\r\n  }\r\n\r\n  get camLilySize() {\r\n    return [this.cam.scale * this.lilyDimX, this.cam.scale * this.lilyDimY];\r\n  }\r\n\r\n  get trueLilySpacingX() {\r\n    return this.lilyDimX + this.lilySpacingX;\r\n  } \r\n\r\n  calcStartLily() {\r\n    this.startLily = 0;//Math.floor(this.numLilies / 2);\r\n    this.startLilyX = 0;\r\n    this.leftLily = 0;\r\n    this.rightLily = this.numLilies - 1;\r\n  }\r\n\r\n  calcLeftLily() {\r\n    this.leftLily = Math.ceil((this.cam.x - this.cam.w / 2) / this.trueLilySpacingX) - this.startLily;\r\n    this.numLilies = Math.ceil(this.cam.w / this.trueLilySpacingX) + 1;\r\n  }\r\n\r\n  getLilyPos(i) {\r\n    let lilyX = this.startLilyX + this.trueLilySpacingX * i;\r\n\r\n    if (!this.negativeLilies) {\r\n      if (i < this.startLily) lilyX = this.startLilyX;\r\n    }\r\n    return [lilyX, this.lilyY]\r\n  }\r\n\r\n  invertLilyX(x) {\r\n    return Math.floor((x - this.leftLilyX) / this.trueLilySpacingX + 1.5);\r\n  }\r\n\r\n  kerplunkAnim(n) {\r\n    this.kerplunked.push([n, this.kerplunkSpeed]);\r\n  }\r\n\r\n  envCondition(frog, request) {\r\n    if (request) {\r\n      let dir = (frog.pointingLeft ? -1 : 1);\r\n\r\n      if (!this.negativeLilies) {\r\n        let intendedLily = frog.number + dir * frog.type;\r\n\r\n        // possible: special behavior when < 0\r\n        if ((intendedLily < 0) && (frog.pointingLeft || frog.type != 0)) {\r\n          return false;\r\n        }\r\n      } \r\n\r\n      frog.direction = dir;\r\n      frog.lily += frog.travelDist;\r\n\r\n      return true;\r\n    }\r\n  }\r\n\r\n  envJump(frog) {\r\n    frog.linearJump();\r\n  }\r\n\r\n  envDependentFrame(player) {\r\n    player.character.pointingLeft = player.pointingLeft;\r\n\r\n    if (player.character.jumpFrames == player.character.maxJumpFrames) {\r\n      this.number += this.travelDist;\r\n    }\r\n  }\r\n\r\n  envJumpEnd(frog) {\r\n    frog.number += frog.travelDist;\r\n  }\r\n\r\n  draw() {\r\n    this.calcLeftLily();\r\n\r\n    for (let i = this.leftLily - 1; i <= this.leftLily + this.numLilies; i++) {\r\n      if (envType == 'LinearLilies2D') {\r\n        for (let j = this.topLily; j <= this.topLily + this.numLiliesY; j++) {\r\n          const lilyPos = cam.toCamCoords(...this.getLilyPos(i, j));\r\n          image(this.sprite, ...lilyPos, ...this.camLilySize);\r\n        }\r\n      }\r\n      else {\r\n        let kerplunkY = 0;\r\n\r\n        for (let [k, kLily] of Object.entries(this.kerplunked)) {\r\n          if (i == kLily[0]) {\r\n            kerplunkY = kLily[1];\r\n            kLily[1] = Math.max(0, kerplunkY - this.buoyancy);\r\n\r\n            if (kLily[1] == 0) this.kerplunked.splice(k, 1);\r\n          }\r\n        }\r\n\r\n        let lilyPos = this.getLilyPos(i);\r\n        lilyPos[1] += kerplunkY;\r\n        lilyPos = cam.toCamCoords(...lilyPos, true, false);\r\n\r\n        image(this.sprite, ...lilyPos, ...this.camLilySize);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass CyclicLilies {\r\n  constructor(cam,\r\n              sprite,\r\n              numLilies = 11) {\r\n    this.cam = cam;\r\n    this.sprite = sprite;\r\n\r\n    this.numLilies = numLilies;\r\n    this.radius = screenSizeX * .2;\r\n    this.radiusX = this.radius;\r\n    this.radiusY = this.radius;\r\n    this.lilyCenterX = screenSizeX / 2;\r\n    this.lilyCenterY = screenSizeY / 2;\r\n    this.lilyScale = 1;\r\n\r\n    this.kerplunked = [];\r\n    this.kerplunkSpeed = 10;\r\n    this.buoyancy = .5;\r\n  }\r\n\r\n  get lilyDimX() {\r\n    return this.sprite.width * this.lilyScale;\r\n  }\r\n\r\n  get lilyDimY() {\r\n    return this.sprite.height * this.lilyScale;\r\n  }\r\n\r\n  get angle() {\r\n    return 2 * Math.PI / this.numLilies;\r\n  }\r\n\r\n  get camLilySize() {\r\n    return [this.lilyDimX, this.lilyDimY];\r\n  }\r\n\r\n  calcLeftLily() {\r\n    this.leftLily = 0;\r\n    this.leftLilyPos = this.getLilyPos(0);\r\n    [this.leftLilyX, this.leftLilyY] = this.leftLilyPos;\r\n  }\r\n\r\n  kerplunkAnim(n) {\r\n    this.kerplunked.push([n, this.kerplunkSpeed]);\r\n  }\r\n\r\n  getCircleCoords(angle) {\r\n    return [this.radiusX * Math.cos(angle), -this.radiusY * Math.sin(angle)];\r\n  }\r\n\r\n  getLilyPos(i) {\r\n    let angle = this.angle * i;\r\n    let [lilyX, lilyY] = this.getCircleCoords(angle);\r\n\r\n    return [this.lilyCenterX + lilyX, this.lilyCenterY + lilyY];\r\n  }\r\n\r\n  envCondition(frog, request) {\r\n    if (request == 'jump') {\r\n      if (!frog.isJumping) {\r\n        let dir = 1;//frog.mouseLeft ? -1 : 1;\r\n        let theta = this.angle * (frog.lily + dir * frog.type * .5);\r\n        frog.lastJumpedDir = dir;\r\n        frog.direction = dir * Math.sign(-Math.sin(theta));\r\n        frog.lily += dir * frog.type;\r\n\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  envJump(frog) {\r\n    if (frog.type > this.numLilies / 2) {\r\n      let angle = lerp(this.angle * (frog.lily - frog.lastJumpedDir * frog.type), \r\n                       this.angle * frog.lily, \r\n                       frog.jumpProgress);\r\n      let [frogX, frogY] = this.getCircleCoords(angle);\r\n      let decayRate = Math.sqrt(frog.type);\r\n\r\n      frog.baseJumpHeight = frog.baseJumpStore / decayRate;\r\n      frog.posX = this.lilyCenterX + frogX + frog.offX;\r\n      frog.posY = this.lilyCenterY + frogY + frog.jumpY + frog.offY;\r\n    } else {\r\n      frog.baseJumpHeight = frog.baseJumpStore;\r\n      frog.linearJump();\r\n    }\r\n  }\r\n\r\n  envDependentFrame(player) {\r\n    player.character.pointingLeft = player.character.direction == -1;\r\n    player.character.mouseLeft = player.pointingLeft;\r\n\r\n    if (player.character.stoppedJumping) {\r\n      //player.character.number += 2 * player.character.lastJumpedDir * player.character.type;\r\n      player.character.stoppedJumping = false;\r\n    }\r\n  }\r\n\r\n  envJumpEnd(frog) {\r\n    frog.number += frog.type;\r\n  }\r\n\r\n  draw() {\r\n    this.calcLeftLily();\r\n\r\n    for (let i = this.leftLily; i < this.leftLily + this.numLilies; i++) {\r\n      if (envType == 'LinearLilies2D') {\r\n        for (let j = this.topLily; j <= this.topLily + this.numLiliesY; j++) {\r\n          const lilyPos = cam.toCamCoords(...this.getLilyPos(i, j));\r\n\r\n          image(this.sprite, ...lilyPos, ...this.camLilySize);\r\n        }\r\n      }\r\n      else {\r\n        let kerplunkY = 0;\r\n\r\n        for (let [k, kLily] of Object.entries(this.kerplunked)) {\r\n          if (i == kLily[0]) {\r\n            kerplunkY = kLily[1];\r\n            kLily[1] = Math.max(0, kerplunkY - this.buoyancy);\r\n\r\n            if (kLily[1] == 0) this.kerplunked.splice(k, 1);\r\n          }\r\n        }\r\n\r\n        let lilyPos = this.getLilyPos(i);\r\n        lilyPos[1] += kerplunkY;\r\n        lilyPos = cam.toCamCoords(...lilyPos, true, false);\r\n\r\n        image(this.sprite, ...lilyPos, ...this.camLilySize);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nclass LinearLilies2D extends LinearLilies {\r\n  constructor(cam,\r\n              sprite,\r\n              lilyScale = .2,\r\n              lilySpacingX = 1,\r\n              lilyMarginX = 20,\r\n              lilyY = screenSizeY * .82,\r\n              negativeLilies = true) { \r\n    super(cam, sprite, lilyScale, lilySpacingX, lilyMarginX, lilyY, negativeLilies);\r\n    this.jVal = 1;\r\n    this.negativeLilies = true;\r\n  }\r\n\r\n  get lilyDimX() {\r\n    return this.lilyScale * this.sprite.width;\r\n  }\r\n\r\n  get lilyDimY() {\r\n    return this.lilyScale * this.sprite.height;\r\n  }\r\n\r\n  get camLilySize() {\r\n    return [this.lilyDimX, this.lilyDimY];\r\n  }\r\n\r\n  get trueLilySpacingX() {\r\n    return this.sprite.width * this.lilyScale + this.lilySpacingX;\r\n  } \r\n\r\n  calcStartLily() {\r\n    this.startLily = Math.floor(this.numLilies / 2);\r\n    this.startLilyX = screenSizeX / 2;\r\n    this.startLilyY = screenSizeY / 2;\r\n    this.leftLily = 1;\r\n    this.rightLily = this.numLilies - 1;\r\n    this.jVal = 5;\r\n  }\r\n\r\n  calcLeftLily() {\r\n    this.leftLily = Math.ceil((this.cam.x - this.cam.w / 2) / this.trueLilySpacingX) - this.startLily;\r\n    this.numLilies = 5* Math.ceil(this.cam.w / this.trueLilySpacingX) + 1;\r\n\r\n    this.topLily = Math.ceil((this.cam.y + this.cam.h / 2) / this.trueLilySpacingX) - this.startLily;\r\n    this.numLiliesY = 10 * Math.ceil(this.cam.h / this.trueLilySpacingX) + 1;\r\n  }\r\n\r\n  getLilyPos(i, j = -1) {\r\n    if (j == -1) j = this.jVal;\r\n    let lilyX = this.startLilyX + this.trueLilySpacingX * i;\r\n    let lilyY = this.trueLilySpacingX * j;\r\n\r\n    // if (!this.negativeLilies) {\r\n    //   if (i < this.startLily) lilyX = this.startLilyX;\r\n    // }\r\n    return this.cam.toWorldCoords(lilyX, lilyY);\r\n  }\r\n\r\n  invertLilyX(x) {\r\n    return Math.floor((x - this.leftLilyX) / this.trueLilySpacingX + 1.5);\r\n  }\r\n\r\n  envCondition(frog, request) {\r\n    if (request) {\r\n      let dir = (frog.pointingLeft ? -1 : 1);\r\n\r\n      if (!this.negativeLilies) {\r\n        let intendedLily = frog.number + dir * frog.type;\r\n\r\n        // possible: special behavior when < 0\r\n        if ((intendedLily < 0) && (frog.pointingLeft || frog.type != 0)) {\r\n          return false;\r\n        }\r\n      } \r\n\r\n      frog.direction = dir;\r\n      frog.lily += frog.travelDist;\r\n\r\n      return true;\r\n    }\r\n  }\r\n\r\n  envJump(frog) {\r\n    frog.linearJump();\r\n  }\r\n\r\n  envDependentFrame(player) {\r\n    player.character.pointingLeft = player.pointingLeft;\r\n    player.character.mouseLeft = player.character.pointingLeft;\r\n\r\n    if (player.character.jumpFrames == player.character.maxJumpFrames) {\r\n      this.number += this.travelDist;\r\n    }\r\n  }\r\n}"],"names":["LinearLilies","constructor","cam","sprite","lilyScale","lilySpacingX","lilyMarginX","lilyY","screenSizeY","negativeLilies","this","targetOffsetX","screenSizeX","kerplunked","kerplunkSpeed","buoyancy","lilyDimX","width","lilyDimY","height","camLilySize","scale","trueLilySpacingX","calcStartLily","startLily","startLilyX","leftLily","rightLily","numLilies","calcLeftLily","Math","ceil","x","w","getLilyPos","i","lilyX","invertLilyX","floor","leftLilyX","kerplunkAnim","n","push","envCondition","frog","request","dir","pointingLeft","number","type","direction","lily","travelDist","envJump","linearJump","envDependentFrame","player","character","jumpFrames","maxJumpFrames","envJumpEnd","draw","envType","j","topLily","numLiliesY","lilyPos","toCamCoords","image","kerplunkY","k","kLily","Object","entries","max","splice","CyclicLilies","radius","radiusX","radiusY","lilyCenterX","lilyCenterY","angle","PI","leftLilyPos","leftLilyY","getCircleCoords","cos","sin","isJumping","theta","lastJumpedDir","sign","lerp","jumpProgress","frogX","frogY","decayRate","sqrt","baseJumpHeight","baseJumpStore","posX","offX","posY","jumpY","offY","mouseLeft","stoppedJumping","LinearLilies2D","super","jVal","startLilyY","y","h","toWorldCoords"],"version":3,"file":"index.fde19e97.js.map"}