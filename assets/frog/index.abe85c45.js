function isCyclic(t){var e=[];return function t(s){if(s&&"object"==typeof s){if(-1!==e.indexOf(s))return!0;for(var i in e.push(s),s)if(s.hasOwnProperty(i)&&t(s[i]))return console.log(s,"cycle at "+i),!0}return!1}(t)}class Player{constructor(t,e){this.cam=t,this.characterProfile=[],this.characterClass=e,this.mouseMode="split",this.pointingLeft=!1,this.inventory={},this.initQuests(),this.gui=new GUI,this.numberColor=color(255),this.numOffsetY=70,this.numOffsetX=0,this.specialNumber=!1,this.specialLily=0,this.sizeSpecial=40,this.specialOffX=30,this.specialOffY=70}get hasQuest(){return this.currentQuest>-1}instantiateCharacter(){return this.character=new this.characterClass(...this.characterProfile),this.character.scale=this.cam.scale,frogs[0]=this.character,this.binds={Q:this.character.typeBind(1),W:this.character.typeBind(2),E:this.character.typeBind(3),R:this.character.typeBind(4)},this.character}resetCharacter(){this.instantiateCharacter(),this.initQuests(),this.cam.target=this.character}assignQuest(t){this.questList.push(new t(player)),this.currentQuest=0}initQuests(){this.questList=[],this.currentQuest=-1,this.questDecayFrames=0,this.maxQuestFrames=100}frame(){const t=this.cam.toCamCoords(this.character.posX,this.character.posY);this.pointingLeft=mouseX<t[0],this.character.environment.envDependentFrame(this),this.hasQuest&&(this.questList[this.currentQuest].frame()&&this.questDecayFrames++,this.questDecayFrames>0&&this.questDecayFrames++,this.questDecayFrames>this.maxQuestFrames&&(this.questDecayFrames=0,this.questList.slice(this.currentQuest,1),this.currentQuest=-1))}drawHunger(){const t=this.cam.toCamCoords(this.character.posX,this.character.posY),e=gfx.flyBar.width,s=gfx.flyBar.height,i=1-frog.hunger/frog.maxHunger;fill(0),stroke(0),frog.hungry&&(push(),tint(255,255*Math.cos(2*frameCount/60)),image(gfx.flyBubble,t[0]+frog.dimX,t[1]-frog.dimY,gfx.flyBubble.width*cam.scale,gfx.flyBubble.height*cam.scale),pop()),frog.ateThisFrame&&frog.showHeart.push(1);for(const e in frog.showHeart)frog.showHeart[e]>0?(frog.showHeart[e]++,image(gfx.heart,t[0]+frog.dimX,t[1]-frog.dimY-frog.showHeart[e]/2,gfx.heart.width*cam.scale,gfx.heart.height*cam.scale),frog.showHeart[e]%=frog.heartFrames):frog.showHeart.splice(e,1);push(),translate(screenSizeX-gfx.flyBar.width,10),image(gfx.flyBarGrey,0,0);const r=gfx.flyBar.get(0,0,i*e,s);image(r,0,0),pop()}drawQuest(t){const e=255*(1-this.questDecayFrames/this.maxQuestFrames);t.gui.draw(e),push(),t.draw(gfx,e),pop()}draw(){if(this.gui.draw(),this.drawHunger(),this.currentQuest>-1&&this.drawQuest(this.questList[this.currentQuest]),this.character.scale=this.cam.scale,this.cam.guiOptions.helpLines&&0!=this.character.type){if(!this.character.isJumping){let t=this.character.pointingLeft?-1:1,e=this.character.posX+this.character.dimX/2,s=lilies.getLilyPos(this.character.lily+t*this.character.type),i=s[0]+this.character.dimX/2+this.character.offX,r=s[1]+this.character.offY;this.curveParams=[e,this.character.posY+this.character.dimY/2,(e+i)/2,(this.character.posY<r?this.character.posY:r)-this.character.jumpHeight+this.character.dimY/2,i,r+this.character.dimY]}const t=[];for(let e=0;e<3;e++){let s=[this.curveParams[2*e],this.curveParams[2*e+1]];[t[2*e],t[2*e+1]]=this.cam.toCamCoords(...s)}const e=[t];push(),setLineDash([5,5]),stroke(255,128),strokeWeight(3),fill(0,0,0,0);let s=!0;for(const t of e){switch(envType){case"LinearLilies":beginShape(),curveVertex(t[0],t[1]),curveVertex(t[0],t[1]),curveVertex(t[2],t[3]),curveVertex(t[4],t[5]),curveVertex(t[4],t[5]),endShape();break;case"CyclicLilies":this.character.isJumping?s=!1:line(t[0],t[1],t[4],t[5])}s&&(strokeWeight(7*this.cam.scale),point(t[4],t[5]))}pop()}if(push(),this.character.changeNumber&&(this.numText=str(this.character.number),this.lilyCamDiff=this.character.lilyPos,this.lilyCamDiff[0]+=2*this.numText.length+this.numOffsetX,this.character.changeNumber=!1),textFont(pixelFont),stroke(this.numberColor),fill(this.numberColor),textSize(this.sizeSpecial*this.cam.scale*(1-this.numText.length/10)),text(this.numText,...this.cam.toCamCoords(this.lilyCamDiff[0],this.lilyCamDiff[1]+this.numOffsetY*this.cam.scale)),this.specialNumber){let t=this.cam.toCamCoords(...this.character.environment.getLilyPos(this.specialLily));t[0]+=this.specialOffX-2*this.specialLily.toString().length,t[1]+=this.specialOffY*cam.scale,text(this.specialLily.toString(),...t)}pop()}}
//# sourceMappingURL=index.abe85c45.js.map
