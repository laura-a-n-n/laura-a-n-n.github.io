{"mappings":"AAUA,SAASA,aAAaC,GAElBC,KAAKC,OAAS,GACdD,KAAKE,MAAQ,KAIbF,KAAKG,KAAO,WAER,MAAMC,EAAW,CAAE,eACX,eACA,gBACA,aACA,eACA,gBACA,aACA,aACA,cACA,WACA,eACA,aACA,aACA,cACA,eACA,gBAER,IAAIC,EAAKL,KACLM,EAAS,MAALP,EAAYA,EAAIQ,OAGxBD,EAAEE,KAAO,WAAYH,EAAGG,QAIxB,IAAI,IAAIC,EAAI,EAAGA,EAAIL,EAASM,OAAQD,IACpC,CACI,IAAIE,EAASP,EAASK,GACtBH,EAAEK,GAAU,SAASC,GAASP,EAAGQ,YAAYF,EAAQC,IAGzD,OAAOP,GAMXL,KAAKc,SAAW,SAAUC,GAEtB,IAAIC,EAAS,IAAID,EAAQhB,GAGzBC,KAAKD,EAAIA,EAGTiB,EAAOC,aAAejB,KAEtB,IAAIM,EAAI,CAAIS,QAASA,EACTC,OAAQA,EACRE,SAAW,UAAWF,EACtBG,SAAW,UAAWH,EACtBI,QAAU,SAAUJ,EACpBK,eAAgB,EAChBC,eAAgB,GAG5B,OADAtB,KAAKC,OAAOsB,KAAKjB,GACVA,GAIXN,KAAKwB,eAAiB,SAAUT,GAE5B,IAAI,IAAIN,EAAI,EAAGA,EAAIT,KAAKC,OAAOS,OAAQD,IACvC,CAEI,GADQT,KAAKC,OAAOQ,GACbM,SAAWA,EACd,OAAON,EAGf,OAAO,GAIXT,KAAKyB,UAAY,SAAUV,GAEvB,IAAIN,EAAIT,KAAKwB,eAAgBT,GAC7B,OAAON,GAAK,EAAIT,KAAKC,OAAOQ,GAAK,MAIrCT,KAAK0B,UAAY,SAAWX,GAExB,OAAmB,MAAdf,KAAKE,OAGHF,KAAKE,MAAMa,SAAWA,GAMjCf,KAAK2B,UAAY,SAAUZ,EAASa,GAEhC,IAAItB,EAAIN,KAAKyB,UAAWV,GAEd,MAALT,IACDA,EAAIN,KAAKc,SAAUC,IAGvBT,EAAEgB,eAAgB,EAElBtB,KAAKE,MAAQI,EAGbA,EAAEU,OAAOY,UAAYA,GAMzB5B,KAAK6B,cAAgB,SAAUD,GAE3B,GAA2B,GAAtB5B,KAAKC,OAAOS,OAAjB,CAGA,IAAIoB,EAAiB,EAErB,GAAmB,MAAd9B,KAAKE,MACV,CAGI,IAAIO,EAAIT,KAAKwB,eAAgBxB,KAAKE,MAAMa,SACxCe,EAAiBrB,EAAIT,KAAKC,OAAOS,OAAS,EAAID,EAAI,EAAI,EAG1D,IAAIsB,EAAY/B,KAAKC,OAAO6B,GAC5B9B,KAAK2B,UAAWI,EAAUhB,QAASa,KAMvC5B,KAAKQ,KAAO,WAIR,IAAIwB,EAAYhC,KAAKE,MAEH,MAAb8B,IAGAA,EAAUd,WAAac,EAAUX,gBAElCW,EAAUhB,OAAOiB,QACjBD,EAAUX,eAAgB,GAGzBW,EAAUb,WAAaa,EAAUV,gBAElCU,EAAUhB,OAAOkB,QACjBF,EAAUV,eAAgB,GAGzBU,EAAUZ,SAEXY,EAAUhB,OAAOR,SAOzBR,KAAKa,YAAc,SAASF,EAAQC,GAEhC,GAAmB,MAAdZ,KAAKE,OAAsC,MAArBF,KAAKE,MAAMc,OAAtC,CAGA,IAAImB,EAAenC,KAAKE,MAAMc,OAAOL,GACjCwB,GACAA,EAAaC,KAAKpC,KAAKE,MAAMc,OAAQJ,KAI7CZ,KAAKqC,aAAe,WAEhBrC,KAAKa,YAAY,iBAIrBb,KAAKsC,WAAa,WAEdtC,KAAKa,YAAY","sources":["public/vendor/js/p5.scenemanager.js"],"sourcesContent":["//\n// p5 SceneManager helps you create p5.js sketches with multiple states / scenes\n// Each scene is a like a sketch within the main sketch. You focus on creating\n// the scene like a regular sketch and SceneManager ensure scene switching\n// routing the main setup(), draw(), mousePressed(), etc. events to the \n// appropriate current scene.\n//\n// Author: Marian Veteanu\n// http://github.com/mveteanu\n//\nfunction SceneManager(p)\n{\n    this.scenes = [];\n    this.scene = null;\n    \n    // Wire relevant p5.js events, except setup()\n    // If you don't call this method, you need to manually wire events\n    this.wire = function()\n    {\n        const P5Events = [ \"mouseClicked\", \n                \"mousePressed\", \n                \"mouseReleased\", \n                \"mouseMoved\", \n                \"mouseDragged\", \n                \"doubleClicked\", \n                \"mouseWheel\", \n                \"keyPressed\", \n                \"keyReleased\", \n                \"keyTyped\", \n                \"touchStarted\", \n                \"touchMoved\", \n                \"touchEnded\", \n                \"deviceMoved\", \n                \"deviceTurned\", \n                \"deviceShaken\" ];\n\n        var me = this;\n        var o = p != null ? p : window;\n\n        // Wire draw manually for speed reasons...\n        o.draw = function(){ me.draw(); };\n\n        // This loop will wire automatically all P5 events to each scene like this:\n        // o.mouseClicked = function() { me.handleEvent(\"mouseClicked\"); }\n        for(var i = 0; i < P5Events.length; i++)\n        {\n            let sEvent = P5Events[i]; // let is necesary to set the scope at the level of for\n            o[sEvent] = function(event) { me.handleEvent(sEvent, event) };\n        }\n        \n        return me;\n    }\n\n\n    // Add a scene to the collection\n    // You need to add all the scenes if intend to call .showNextScene()\n    this.addScene = function( fnScene )\n    {\n        var oScene = new fnScene(p);\n\n        // inject p as a property of the scene\n        this.p = p;\n        \n        // inject sceneManager as a property of the scene\n        oScene.sceneManager = this;\n\n        var o = {   fnScene: fnScene, \n                    oScene: oScene,\n                    hasSetup : \"setup\" in oScene,\n                    hasEnter : \"enter\" in oScene,\n                    hasDraw : \"draw\" in oScene,\n                    setupExecuted : false,\n                    enterExecuted : false };\n\n        this.scenes.push(o);\n        return o;\n    }\n\n    // Return the index of a scene in the internal collection\n    this.findSceneIndex = function( fnScene )\n    {\n        for(var i = 0; i < this.scenes.length; i++)\n        {\n            var o = this.scenes[i]; \n            if ( o.fnScene == fnScene )\n                return i;\n        }\n\n        return -1;\n    }\n\n    // Return a scene object wrapper\n    this.findScene = function( fnScene )\n    {\n        var i = this.findSceneIndex( fnScene );\n        return i >= 0 ? this.scenes[i] : null;\n    }\n\n    // Returns true if the current displayed scene is fnScene\n    this.isCurrent = function ( fnScene )\n    {\n        if ( this.scene == null )\n            return false;\n\n        return this.scene.fnScene == fnScene;\n    }\n\n    // Show a scene based on the function name\n    // Optionally you can send arguments to the scene\n    // Arguments will be retrieved in the scene via .sceneArgs property\n    this.showScene = function( fnScene, sceneArgs )\n    {\n        var o = this.findScene( fnScene );\n\n        if ( o == null )\n            o = this.addScene( fnScene );\n        \n        // Re-arm the enter function at each show of the scene\n        o.enterExecuted = false;\n\n        this.scene = o;\n\n        // inject sceneArgs as a property of the scene\n        o.oScene.sceneArgs = sceneArgs;\n    }\n\n    // Show the next scene in the collection\n    // Useful if implementing demo applications \n    // where you want to advance scenes automatically\n    this.showNextScene = function( sceneArgs )\n    {\n        if ( this.scenes.length == 0 )\n            return;\n\n        var nextSceneIndex = 0;\n\n        if ( this.scene != null )\n        {\n            // search current scene... \n            // can be optimized to avoid searching current scene...\n            var i = this.findSceneIndex( this.scene.fnScene );\n            nextSceneIndex = i < this.scenes.length - 1 ? i + 1 : 0;\n        }\n\n        var nextScene = this.scenes[nextSceneIndex];\n        this.showScene( nextScene.fnScene, sceneArgs );\n    }\n    \n    // This is the SceneManager .draw() method\n    // This will dispatch the main draw() to the \n    // current scene draw() method\n    this.draw = function()\n    {\n        // take the current scene in a variable to protect it in case\n        // it gets changed by the user code in the events such as setup()...\n        var currScene = this.scene;\n        \n        if ( currScene == null )\n            return;\n\n        if ( currScene.hasSetup && !currScene.setupExecuted  )\n        {\n            currScene.oScene.setup();\n            currScene.setupExecuted = true;\n        }\n\n        if ( currScene.hasEnter && !currScene.enterExecuted  )\n        {\n            currScene.oScene.enter();\n            currScene.enterExecuted = true;\n        }\n\n        if ( currScene.hasDraw )\n        {\n            currScene.oScene.draw();\n        }\n    }\n\n\n    // Handle a certain event for a scene... \n    // It is used by the anonymous functions from the wire() function\n    this.handleEvent = function(sEvent, event)\n    {\n        if ( this.scene == null || this.scene.oScene == null )\n            return;\n\n        var fnSceneEvent = this.scene.oScene[sEvent];\n        if (fnSceneEvent)\n            fnSceneEvent.call(this.scene.oScene, event);\n    }\n\n    // Legacy method... preserved for maintaining compatibility\n    this.mousePressed = function()\n    {\n        this.handleEvent(\"mousePressed\");\n    }\n\n    // Legacy method... preserved for maintaining compatibility\n    this.keyPressed = function()\n    {\n        this.handleEvent(\"keyPressed\");\n    }\n\n}\n"],"names":["SceneManager","p","this","scenes","scene","wire","P5Events","me","o","window","draw","i","length","sEvent","event","handleEvent","addScene","fnScene","oScene","sceneManager","hasSetup","hasEnter","hasDraw","setupExecuted","enterExecuted","push","findSceneIndex","findScene","isCurrent","showScene","sceneArgs","showNextScene","nextSceneIndex","nextScene","currScene","setup","enter","fnSceneEvent","call","mousePressed","keyPressed"],"version":3,"file":"index.acf0c141.js.map"}