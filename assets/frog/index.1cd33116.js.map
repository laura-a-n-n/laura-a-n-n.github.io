{"mappings":"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","sources":["public/src/scene/multiples-puzzle.js"],"sourcesContent":["function MultiplesPuzzle() {\n\n\tthis.envFunction = linearEnvironment;\n\tgeneralState.bg = gfx['bg'];\n\n\tgeneralState.drawBackground = function() {\n\t\tbgScale = screenSizeX / gfx.bg.width;\n\t\timage(generalState.bg, 0, -bgScale * gfx.bg.height / 4, screenSizeX, bgScale * gfx.bg.height);\n\t}\n\n\tgeneralState.song = sfx.toyTown;\n\tgeneralState.songVol = .3;\n\n\tObject.assign(this, generalState);\n\n\n\tpuzolsComplete = 0;\n\n\t// this.mouseClicked = function() {\n\n\t// \tif (snailPuzzle && placingSnail) {\n\t// \t\tplacingSnail = false;\n\t// \t\tcontrolsEnabled = true;\n\t// \t}\n\t// }\n\n\t// this.keyPressed = function() {\n\t// \tif (snailPuzzle && keyCode == UP_ARROW || keyCode == DOWN_ARROW) {\n\t// \t\tcurrentFrogType++;\n\t// \t\tcurrentFrogType %= 2;\n\t// \t\tfrog.type = frogTypes[currentFrogType];\n\t// \t}\n\t// }\n\n\tthis.setupFn = function() {\n\t\tpuzzleMode = false;\n\t\tsnailPuzzle = true;\n\n\t\tplayer.specialNumber = true;\n\t\tplayer.numberColor = color(0);\n\n\t\tbuttonPressed = false;\n\t\twaitFrames = 0;\n\t\tmaxWaitFrames = 4;\n\t\tlevelFailed = false;\n\t\tlevelWon = false;\n\t\tfrog.levelWon = false;\n        won = false;\n\n        frogTypes = this.sceneArgs.frogTypes;\n\t\tconsole.log(currentFrogType);\n\t\tfrog.type = frogTypes[currentFrogType];\n\n\t\tcontrolsEnabled = false;\n\t\tdoubleWon = false;\n\t\tdebounce = true;\n\n\t\tplayer.gui.initialize([...frogTypes, 0, 0]);//this.sceneArgs.initVals);\n\t\tplayer.gui.calculate();\n\t\tplayer.gui.obj.quickFrog.draw = true;\n\t\tbuttonMap = ['QButton', 'WButton'];\n\t\tplayer.gui.obj.quickFrog.obj.EButton.doNotDraw = true;\n\t\tplayer.gui.obj.quickFrog.obj.RButton.doNotDraw = true;\n\t\tplayer.specialOffX = player.character.environment.lilyDimX / 4;\n\t\tplayer.specialOffY = 60;\n\n\t\tcam.scale = cam.minScale;\n\t\tcam.targetOffsetX = 6 * cam.w / 13;\n\t\tif (!cam.minX) cam.clampX(cam.x - 50, Number.MAX_SAFE_INTEGER);\n\t\tcam.anchored = false;\n\t\tsnailDebounce = 0;\n\n\t\tlilies.negativeLilies = false;\n\t\tlilies.lilySpacingX = 80;\n\n\t\tif (bugs.length == 0) {\n\t\t\tsnail = new Bug(lilies, gfx['snail'], 1, .2, 'snail');\n\t\t\tsnail.edible = false;\n\t\t\tbugs = [snail];\n\t\t\tsnail.lily = player.specialLily;\n\t\t} else {\n\t\t\tplayer.specialLily = snail.lily;\n\t\t}\n\t}\n\n\tthis.particularSetup = function() {\n\t\tcurrentFrogType = 0;\n\t\tplayer.specialLily = 999;\n\t\tplacingSnail = true;\n\t\tif (cam.locked) {\n\t\t\tcam.toggleLock(frog);\n\t\t}\n\t\tthis.setupFn();\n\t}\n\n\tthis.resetLevel = function() {\n\t\tlevelFailed = false;\n\t\tbuttonPressed = false;\n\t\tif (puzolsComplete % 2 == 0) placingSnail = true;\n\t\twaitFrames = 0;\n\t\tsnailDebounce = 0;\n\n\t\tlastHunger = frog.hunger;\n\n\t\tfrog = player.instantiateCharacter();\n        frog.type = frogTypes[currentFrogType];\n\t\tif (cam.locked && cam.target != frog) {\n\t\t\tcam.toggleLock(frog);\n\t\t\tcam.toggleLock(frog);\n\t\t}\n\n\t\tfrog.hunger = lastHunger;\n\t}\n\n\tthis.particularFrame = function() {\n        frog.pointingLeft=false;\n\n\t\tif ((snailDebounce <= 1) && frogs.length == 1) placingSnail = true;\n\t\tif (placingSnail && (snailDebounce > 1)) {\n\t        // compute snail position\n\t\t\tlet snailLily = constrain(lilies.invertLilyX(cam.toWorldCoords(mouseX, lilies.lilyY)[0]), 1, Number.MAX_SAFE_INTEGER);//);lilies.numLilies);\n\t\t\tsnail.lily = snailLily;\n\t\t\tplayer.specialLily = snailLily;\n\t\t} else if (placingSnail) snailDebounce += deltaTime / 1000;\n\t\telse {\n\t\t\tlet buttonRef = player.gui.obj.quickFrog.obj[buttonMap[currentFrogType]];\n\t\t\tbuttonRef.stroke = 'rgba(100, 255, 100, 1)';\n\t\t\tbuttonRef.color = 'rgba(100, 255, 100, 1)';\n\t\t\tbuttonRef.image = gfx.buttonToggled;\n\t\t\tbuttonRef.y = screenSizeY / 28;\n\t\t\tbuttonRef.imageScale = .98;\n\t\t}\n\n\t\tif (levelFailed || levelWon) {\n\t\t\tif(waitFrames==0)console.log(\"level decision\");\n\t\t\twaitFrames += deltaTime / 1000;\n\t\t\tif (!levelFailed) {\n\t\t\t\thasWon = true;\n\t\t\t} else hasWon = false;\n\n\t\t\tif (waitFrames > maxWaitFrames || (levelWon && (puzolsComplete % 2 == 0) && waitFrames > maxWaitFrames / 4)) {\n\t\t\t\tthis.resetLevel();\n\n\t\t\t\tconsole.log(hasWon, won);\n\t\t\t\tif (hasWon) won = true;\n\t\t\t\telse {\n\t\t\t\t\thasWon = false;\n\t\t\t\t\tfrog.type = frogTypes[0];\n\t\t\t\t\tfrogs = [frog];\n\t\t\t\t\tvisibleFrogs = [0];\n\t\t\t\t}\n\n\n\t\t\t\tif (levelFailed) {\n\t\t\t\t\tconsole.log(\"epic fail\")\n\t\t\t\t\tpuzolsComplete = 0;\n\t\t\t\t\tbugs = [];\n\t\t\t\t}\n\n\t\t\t\tif (levelWon || won) {\n\t\t\t\t\tconsole.log(puzolsComplete);\n\t\t\t\t\tif (puzolsComplete % 2 == 1) { \n\t\t\t\t\t\tsnail.edible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsnail.edible = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (puzolsComplete == 1) {\n\t\t\t\t\t\t// ok time to move on...\n\t\t\t\t\t\t// mgr.showScene(OpenLinear, {step: 1})\n\t\t\t\t\t\tthis.sceneArgs.frogTypes = [3, 7];\n\t\t\t\t\t\tthis.setupFn();\n\t\t\t\t\t\tplayer.gui.obj.quickFrog.obj.QButton.doNotDraw = false;\n\t\t\t\t\t\tplayer.gui.obj.quickFrog.obj.WButton.doNotDraw = false;\n\t\t\t\t\t\tfrogs = [frog];\n\t\t\t\t\t\tvisibleFrogs = [0];\n\t\t\t\t\t\t// if (cam.locked) cam.toggleLock(frog);\n\t\t\t\t\t\t// cam.toggleLock(frog);\n\t\t\t\t\t\tpuzolsComplete = 2;\n\t\t\t\t\t} else if (puzolsComplete == 3) {\n\t\t\t\t\t\tthis.sceneArgs.frogTypes = [5, 11];\n\t\t\t\t\t\tthis.setupFn();\n\t\t\t\t\t\tplayer.gui.obj.quickFrog.obj.QButton.doNotDraw = false;\n\t\t\t\t\t\tplayer.gui.obj.quickFrog.obj.WButton.doNotDraw = false;\n\t\t\t\t\t\tpuzolsComplete = 4;\n\t\t\t\t\t\tfrogs = [frog];\n\t\t\t\t\t\tvisibleFrogs = [0];\n\t\t\t\t\t\t// if (cam.locked) cam.toggleLock(frog);\n\t\t\t\t\t\t// cam.toggleLock(frog);\n\t\t\t\t\t} else if (puzolsComplete == 5) {\n\n\t\t\t\t\t\tthis.particularDraw = function() { background(0); } // fix glitchy screen\n\t\t\t\t\t\t// ok time to move on...\n\t\t\t\t\t\tmgr.showScene(OpenLinear, {step: 1})\n\t\t\t\t\t}else {\n\t\t\t\t\t\t// this.sceneArgs.specialLily = 12;\n\t\t\t\t\t\t// this.sceneArgs.initVals = [5, 7, 8, 6];\n\t\t\t\t\t\tconsole.log('get em next time');\n\t\t\t\t\t\tlet lastFrogTypeIndex = (currentFrogType+1)%2;\n\t\t\t\t\t\tlet lastSnailLily = snail.lily;\n\t\t\t\t\t\tfrogs[1].type = frogTypes[lastFrogTypeIndex];\n\t\t\t\t\t\tconsole.log('cur, last', currentFrogType, lastFrogTypeIndex)\n\t\t\t\t\t\tthis.setupFn();\n\t\t\t\t\t\tplayer.gui.obj.quickFrog.obj[buttonMap[lastFrogTypeIndex]].doNotDraw = true;\n\t\t\t\t\t\tpuzolsComplete++;\n\t\t\t\t\t\tsnail.lily = lastSnailLily;\n\t\t\t\t\t\tdebounce = false;\n\t\t\t\t\t\tplacingSnail = false;\n\t\t\t\t\t\tcontrolsEnabled = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if ((cam.target != frog) || (puzolsComplete % 2 == 0 && levelWon)) {\n\t\t\t\t// \tif (cam.locked) cam.toggleLock(frog); // unbind from prev frog\n\t\t\t\t// \tcam.toggleLock(frog); // lock to new frog\n\t\t\t\t// \tif (cam.locked && (puzolsComplete % 2 == 0 && levelWon)) cam.toggleLock(frog); // unbind if placing snail. it makes sense i swear\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\tif (frog.isJumping) return;\n\n\t\tif (!levelFailed && frog.lily > player.specialLily && bugs.length > 0) {\n\t\t\t//frog.number += frog.type;\n\t\t\tconsole.log('failed');\n\t\t\tfrog.type = 0;\n\t\t\tcontrolsEnabled = false;\n\t\t\tlevelFailed = true;\n\t\t\tfrog.drawType = false;\n\t\t} else if (!levelWon && (frog.lily == player.specialLily))  {\n\t\t\tconsole.log('ok ok');\n\t\t\tif (!won) {\n\t\t\t\tconsole.log('h');\n\t\t\t\tplayer.gui.obj.quickFrog.obj[buttonMap[currentFrogType]].doNotDraw = true;\n\t\t\t\twon = true;\n\t\t\t\tfrog.type = 0;\n\t\t\t\tfrog.drawType = false;\n\t\t\t\tfrogs.push(frog);\n\t\t\t\tfrog.showHeart.push(1);\n\t\t\t\tvisibleFrogs.push(1);\n\t\t\t\tcurrentFrogType++;\n\t\t\t\tcurrentFrogType %= 2;\n\t\t\t\tconsole.log('cur cur', currentFrogType);\n\t\t\t\tlevelWon = true;\n\t\t\t\tplacingSnail = false;\n\t\t\t\tplayer.specialNumber = false;\n\t\t\t}\n\t\t} else if (puzolsComplete % 2 == 0 && (frog.lily == player.specialLily) && !debounce) {\n\t\t\tconsole.log('!debounce && won');\n\t\t\tdebounce = true;\n\t\t\tplayer.specialNumber = false;\n\t\t\tsnail.edible = true;\n\t\t\t// epic! wonned!\n\t\t\tfrog.type = 0; // don't move!\n\t\t\tfrog.levelWon = true;\n\t\t\tplayer.specialNumber = false;\n\t\t\tfrog.showHeart.push(1);\n\t\t\tlevelWon = true;\n\t\t\tpuzolsComplete++;\n\t\t\tfrog.drawType = false;\n\t\t}\n\t}\n\n\tthis.particularDraw = function() {\n\t\timage(gfx['snail'], 5, 0, gfx['snail'].width * .1, gfx['snail'].height * .1);\n\t\ttext(puzolsComplete.toString(), 15 + gfx['snail'].width * .1, gfx['snail'].height * .1 / 2 + 10)\n\t}\n}"],"names":["MultiplesPuzzle","this","envFunction","linearEnvironment","generalState","bg","gfx","drawBackground","bgScale","screenSizeX","width","image","height","song","sfx","toyTown","songVol","Object","assign","puzolsComplete","setupFn","puzzleMode","snailPuzzle","player","specialNumber","numberColor","color","buttonPressed","waitFrames","maxWaitFrames","levelFailed","levelWon","frog","won","frogTypes","sceneArgs","console","log","currentFrogType","type","controlsEnabled","doubleWon","debounce","gui","initialize","calculate","obj","quickFrog","draw","buttonMap","EButton","doNotDraw","RButton","specialOffX","character","environment","lilyDimX","specialOffY","cam","scale","minScale","targetOffsetX","w","minX","clampX","x","Number","MAX_SAFE_INTEGER","anchored","snailDebounce","lilies","negativeLilies","lilySpacingX","bugs","length","snail","Bug","edible","lily","specialLily","particularSetup","placingSnail","locked","toggleLock","resetLevel","lastHunger","hunger","instantiateCharacter","target","particularFrame","pointingLeft","frogs","snailLily","constrain","invertLilyX","toWorldCoords","mouseX","lilyY","deltaTime","buttonRef","stroke","buttonToggled","y","screenSizeY","imageScale","hasWon","visibleFrogs","QButton","WButton","particularDraw","background","mgr","showScene","OpenLinear","step","lastFrogTypeIndex","lastSnailLily","isJumping","drawType","showHeart","push","text","toString"],"version":3,"file":"index.1cd33116.js.map"}